// Mocks generated by Mockito 5.0.14 from annotations
// in postor/test/postor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;

import 'package:http/http.dart' as _i6;
import 'package:http/src/base_request.dart' as _i10;
import 'package:http/src/byte_stream.dart' as _i4;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:http_parser/http_parser.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

class _FakeByteStream_3 extends _i1.Fake implements _i4.ByteStream {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i6.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i7.Future<_i2.Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i9.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i9.Uint8List>.value(_i9.Uint8List(0)))
          as _i7.Future<_i9.Uint8List>);
  @override
  _i7.Future<_i3.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i7.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [MultipartRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartRequest extends _i1.Mock implements _i6.MultipartRequest {
  MockMultipartRequest(this.method, this.url) {
    _i1.throwOnMissingStub(this);
  }

  @override
  final String method;
  @override
  final Uri url;

  @override
  final Map<String, String> fields = {};
  @override
  final List<MockMultipartFile> files = [];

  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? value) =>
      super.noSuchMethod(Invocation.setter(#contentLength, value),
          returnValueForMissingStub: null);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? value) =>
      super.noSuchMethod(Invocation.setter(#persistentConnection, value),
          returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? value) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, value),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? value) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, value),
          returnValueForMissingStub: null);
  @override
  bool get finalized =>
      (super.noSuchMethod(Invocation.getter(#finalized), returnValue: false)
          as bool);
  @override
  _i4.ByteStream finalize() =>
      (super.noSuchMethod(Invocation.method(#finalize, []),
          returnValue: _FakeByteStream_3()) as _i4.ByteStream);
  @override
  _i7.Future<_i3.StreamedResponse> send() =>
      (super.noSuchMethod(Invocation.method(#send, []),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i7.Future<_i3.StreamedResponse>);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is _i6.MultipartRequest &&
        mapEquals(other.fields, fields) &&
        listEquals(other.files, files) &&
        other.method == method &&
        other.url == url;
  }

  @override
  int get hashCode => method.hashCode ^ url.hashCode;
}

bool mapEquals<T, U>(Map<T, U>? a, Map<T, U>? b) {
  if (a == null) {
    return b == null;
  }
  if (b == null || a.length != b.length) {
    return false;
  }
  if (identical(a, b)) {
    return true;
  }
  for (final T key in a.keys) {
    if (!b.containsKey(key) || b[key] != a[key]) {
      return false;
    }
  }
  return true;
}

bool listEquals<T>(List<T>? a, List<T>? b) {
  if (a == null) {
    return b == null;
  }
  if (b == null || a.length != b.length) {
    return false;
  }
  if (identical(a, b)) {
    return true;
  }
  for (int index = 0; index < a.length; index += 1) {
    if (a[index] != b[index]) {
      return false;
    }
  }
  return true;
}

/// A class which mocks [MultipartFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartFile implements _i6.MultipartFile {
  MockMultipartFile(
    this.field,
    Stream<List<int>> stream,
    this.length, {
    this.filename,
    _i5.MediaType? contentType,
  })  : _stream = _i6.ByteStream(stream),
        contentType =
            contentType ?? _i5.MediaType('application', 'octet-stream');

  factory MockMultipartFile.fromBytes(
    String field,
    List<int> value, {
    String? filename,
    _i5.MediaType? contentType,
  }) {
    final stream = _i4.ByteStream.fromBytes(value);
    return MockMultipartFile(
      field,
      stream,
      value.length,
      filename: filename,
      contentType: contentType,
    );
  }
  @override
  final String field;

  @override
  final _i5.MediaType contentType;

  @override
  final String? filename;

  @override
  final int length;

  /// The stream that will emit the file's contents.
  final _i4.ByteStream _stream;

  @override
  _i6.ByteStream finalize() => _stream;

  @override
  bool get isFinalized => true;

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is _i6.MultipartFile &&
        other.field == field &&
        other.filename == filename &&
        other.length == length;
  }

  @override
  int get hashCode {
    return field.hashCode ^ filename.hashCode ^ length.hashCode;
  }
}
